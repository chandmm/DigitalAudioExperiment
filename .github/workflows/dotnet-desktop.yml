name: Build and Package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: windows-2022  # Use Windows Server 2022 runner

    env:
      Solution_Name: DigitalAudioExperiment.sln
      Configuration: Release

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'  # Use .NET 8 SDK

    - name: Install Visual Studio Installer Projects Extension
      run: |
        # Define variables
        $vsixUrl = "https://marketplace.visualstudio.com/_apis/public/gallery/publishers/VisualStudioClient/vsextensions/MicrosoftVisualStudioInstallerProjects/2.0.1/vspackage"
        $vsixFile = "Microsoft.VisualStudio.InstallerProjects.vsix"
        
        # Download the extension VSIX file
        Write-Host "Downloading Visual Studio Installer Projects extension from $vsixUrl"
        Invoke-WebRequest -Uri $vsixUrl -OutFile $vsixFile -Headers @{ "Accept" = "application/octet-stream" }

        # Verify the VSIX file was downloaded
        if (!(Test-Path $vsixFile)) {
          Write-Error "Failed to download the VSIX file."
          exit 1
        }

        # Find the path to Visual Studio using vswhere
        $vsPath = &"C:\Program Files\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
        if (!$vsPath) {
          Write-Error "Visual Studio installation not found."
          exit 1
        }
        Write-Host "Visual Studio Path: $vsPath"

        # Install the extension
        Write-Host "Installing the Visual Studio Installer Projects extension."
        & "$vsPath\Common7\IDE\VSIXInstaller.exe" /quiet /admin $vsixFile

        # Verify the installation
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to install the Visual Studio Installer Projects extension."
          exit 1
        }

        Write-Host "Visual Studio Installer Projects extension installed successfully."
      shell: pwsh

    - name: Build the .NET 8 Application
      run: dotnet build ${{ env.Solution_Name }} --configuration ${{ env.Configuration }}

    - name: Build the Installer Project
      run: |
        # Find the path to devenv.com
        $vsPath = &"C:\Program Files\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
        if (!$vsPath) {
          Write-Error " ChatGPT: Visual Studio installation not found."
          exit 1
        }
        Write-Host "Visual Studio Path: $vsPath"

        # Build the solution, including the Installer Project
        & "$vsPath\Common7\IDE\devenv.com" ${{ env.Solution_Name }} /Build "${{ env.Configuration }}|Any CPU"

        # Check if the build was successful
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Build failed."
          exit 1
        }
      shell: pwsh

    - name: List Installer Output Directory
      run: |
        dir "DigitalAudioExperimentInstaller\bin\${{ env.Configuration }}"
      shell: pwsh

    - name: Upload MSI Installer Artifact
      uses: actions/upload-artifact@v3
      with:
        name: MSI Installer
        path: 'DigitalAudioExperimentInstaller\bin\${{ env.Configuration }}\DigitalAudioExperimentInstaller.msi'
