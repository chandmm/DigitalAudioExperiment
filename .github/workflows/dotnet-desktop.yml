name: .NET Core Desktop

# Made with the assistance of ChatGPT

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: windows-latest

    env:
      Solution_Name: DigitalAudioExperiment.sln
      Configuration: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Download NuGet.exe 5.8.x
      run: |
        Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/v5.8.0/nuget.exe -OutFile nuget.exe

    - name: Restore NuGet packages with nuget.exe
      run: |
        .\nuget.exe restore ${{ env.Solution_Name }} -Verbosity detailed

    - name: Install WiX Toolset v3.11
      run: |
        Invoke-WebRequest -Uri https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe -OutFile wix311.exe 
        .\wix311.exe /install /quiet /norestart

    - name: Set up MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Build the application
      run: msbuild ${{ env.Solution_Name }} /t:Rebuild /p:Configuration=${{ env.Configuration }}

    - name: List build outputs
      shell: pwsh
      run: |
        Get-ChildItem -Path "**/bin/${{ env.Configuration }}/**/*" -Recurse | ForEach-Object { Write-Host $_.FullName }

    - name: Find MSI file
      id: find_msi
      shell: pwsh
      run: |
        $msi = Get-ChildItem -Path "**/bin/${{ env.Configuration }}/**/*.msi" -Recurse | Select-Object -First 1
        if ($msi -ne $null) {
          Write-Host "MSI file found: $($msi.FullName)"
          echo "msi_path=$($msi.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "msi_directory=$($msi.DirectoryName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        } else {
          Write-Error "MSI file not found"
          exit 1
        }

    - name: Upload MSI artifact
      uses: actions/upload-artifact@v3
      with:
        name: MSIInstaller
        path: ${{ steps.find_msi.outputs.msi_path }}
        root-directory: ${{ steps.find_msi.outputs.msi_directory }}
